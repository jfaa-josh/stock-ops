name: stockops

# Grab .env file for environment variables
x-common-envfile: &common-envfile
  env_file:
    - .env

# Anchor for the shared Prefect env vars
x-common-envvars: &common-envvars
  ENV: production                                     # Set environment to production so you skip load_dotenv()
  PREFECT_DEFAULT_WORK_POOL_NAME: default             # Default work pool for Prefect tasks

services:
  postgres:                                           # PostgreSQL database service to store metadata for containers
    image: postgres:14                                # Use Postgres version 14 image
    environment:                                      # Set database credentials
      POSTGRES_USER: prefect                          # Username for the DB
      POSTGRES_PASSWORD: prefect                      # Password for the DB
      POSTGRES_DB: prefect                            # Default database name
    volumes:
      - postgres_data:/var/lib/postgresql/data        # Persist data on host volume
    healthcheck:                                      # Check DB readiness
      test: ["CMD-SHELL", "pg_isready -U prefect"]    # Command to test if Postgres is ready
      interval: 5s                                    # Time between checks
      timeout: 5s                                     # How long to wait per check
      retries: 5

  redis:                                              # Redis cache/service for message brokering between containers
    image: redis:7                                    # Use Redis version 7 image
    volumes:
      - redis_data:/data                              # Persist Redis data on host volume
    healthcheck:                                      # Check Redis readiness
      test: ["CMD-SHELL", "redis-cli ping"]           # Command to ping Redis
      interval: 5s                                    # Check every 5 seconds
      timeout: 5s                                     # Timeout per check
      retries: 5                                      # Number of retries before marking unhealthy

  prefect-server:                                     # Prefect API + services container
    <<: *common-envfile                               # Load common .env file for environment variables
    build:                                            # Build a custom image ahead of runtime
      context: .                                      # └─ use this repo as build context
      dockerfile: docker/Dockerfile.prefect-server    # └─ path to our optimized server Dockerfile
      args:                                           # └─ pass your version args into the build
        PYTHON_VERSION: ${PYTHON_VERSION}
        PREFECT_VERSION: ${PREFECT_VERSION}
    image: prefect-server                             # Tag for the built image
    working_dir: /app                                 # Run all commands from /app
    environment:                                      # Prefect configuration variables
      <<: *common-envvars                             # Inherit common environment variables
      # Connection string for Prefect → Postgres:
      PREFECT_API_DATABASE_CONNECTION_URL: postgresql+asyncpg://prefect:prefect@postgres:5432/prefect
      PREFECT_SERVER_API_HOST: 0.0.0.0                # Listen on every network interface
      PREFECT_API_URL: http://prefect-server:4200/api # Internal API URL for Prefect services
      PREFECT_UI_API_URL: http://localhost:4200/api   # Browser‐visible UI endpoint
      PREFECT_LOGGING_LEVEL: DEBUG                    # Verbose logs for debugging
      PREFECT_MESSAGING_BROKER: prefect_redis.messaging   # Broker config for Prefect messaging
      PREFECT_MESSAGING_CACHE: prefect_redis.messaging    # Cache config for messaging
      PREFECT_REDIS_MESSAGING_HOST: redis             # Redis hostname for messaging
      PREFECT_REDIS_MESSAGING_PORT: 6379              # Redis port
      PREFECT_REDIS_MESSAGING_DB: 0                   # Redis DB index
    depends_on:
      postgres:
        condition: service_healthy                    # Wait for Postgres to be ready
      redis:
        condition: service_healthy                    # Wait for Redis to be ready
    ports:
      - "4200:4200"                                   # Expose the Prefect UI/API port
    healthcheck:                                      # Verify the API comes up successfully
      test: ["CMD-SHELL", "curl -f http://localhost:4200/api/health || exit 1"]
      interval: 5s                                    # Poll every 5 seconds
      timeout: 3s                                     # Timeout each check after 3 seconds
      retries: 10                                     # Try up to 10 times before marking unhealthy

  prefect-serve:                                      # Prefect agent for local (no worker pool/no deployment) task execution
    <<: *common-envfile                               # Load common .env file for environment variables
    build:
      context: .                                      # Docker build context is repo root
      args:
        PYTHON_VERSION: ${PYTHON_VERSION}             # Pass Python version to Dockerfile
        PREFECT_VERSION: ${PREFECT_VERSION}           # Pass Prefect version to Dockerfile
      dockerfile: docker/Dockerfile.prefect-serve     # Custom Dockerfile for executing deployment free flows
    image: prefect-serve                              # Name of the built image
    depends_on:
      prefect-server:
        condition: service_healthy                    # Wait until Prefect server is healthy

    environment:                                      # Prefect configuration variables
      <<: *common-envvars                             # Inherit common environment variables
      PREFECT_API_URL: http://prefect-server:4200/api # API URL for the worker to pull jobs
      DB_DATA_DIR: /app/data                          # Define a variable to reference in src config for local .db storage directory
    command: >                                        # Create default pool (if missing); Start a forever-running worker polling 'default':
      bash -c "
        prefect work-pool create default --type process --set-as-default || true &&
        prefect worker start --pool default --type process
      "
    healthcheck:                                      # Check if the Prefect worker is ready
      test: ["CMD-SHELL", "prefect work-pool inspect default"]
      interval: 10s                                   # Check every 10 seconds
      timeout: 5s                                     # Timeout each check after 5 seconds
      retries: 5                                      # Retry up to 5 times before marking unhealthy
      start_period: 10s                               # Wait 10 seconds before starting health checks
    volumes:
      - ./data:/app/data                              # bind local data directory for .db file storage in the container

  streamlit:                                          # Streamlit UI container
    <<: *common-envfile                               # Load common .env file for environment variables
    build:
      context: .                                      # Build context is repo root
      args:
        PYTHON_VERSION: ${PYTHON_VERSION}             # Pass Python version to Dockerfile
      dockerfile: docker/Dockerfile.streamlit         # Custom Dockerfile for Streamlit
    image: streamlit                                  # Name of the built Streamlit image
    ports:
      - "8501:8501"                                   # Expose Streamlit app port
    depends_on:
      prefect-serve:
        condition: service_healthy                    # Wait until Prefect server is ready
    environment:
      <<: *common-envvars                             # Inherit common environment variables
      PREFECT_API_URL: http://prefect-server:4200/api   # Prefect API URL for Streamlit to trigger flows
    command: streamlit run datapipe_ui/frontend.py      # Launch the Streamlit application

volumes:                                              # Named Docker volumes for data persistence
  postgres_data:                                      # Holds Postgres data directory
  redis_data:                                         # Holds Redis data directory
